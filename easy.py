##################################################################################################################################
#Say "Hello, World!" With Python
print("Hello, World!")
##################################################################################################################################

##################################################################################################################################
#Python If-Else
import math
import os
import random
import re
import sys

if __name__ == '__main__':
    n = int(input().strip())

    if n % 2 == 1 or (n % 2 == 0 and (n >= 6 and n <= 20)):
        print('Weird')
    else:
        print('Not Weird')
##################################################################################################################################

##################################################################################################################################
#Arithmetic Operators
if __name__ == '__main__':
    a = int(input())
    b = int(input())

    print(a + b)
    print(a - b)
    print(a * b)
##################################################################################################################################

##################################################################################################################################
#Python: Division
if __name__ == '__main__':
    a = int(input())
    b = int(input())

    print(a//b)
    print(a/b)
##################################################################################################################################

##################################################################################################################################
#Loops
if __name__ == '__main__':
    n = int(input())

    for i in range(n):
        print(i ** 2)
##################################################################################################################################

##################################################################################################################################
#Print Function
if __name__ == '__main__':
    n = int(input())

    a = []

    for i in range(n):
        a.insert(i,str(i+1))
    
    print(''.join(a))
##################################################################################################################################

##################################################################################################################################
#List Comprehensions
if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    a = []

    for i in range(x+1):
        for j in range(y+1):
            for k in range(z+1):
                if i + j + k != n:
                    a.append([i,j,k])
                else:
                    continue

    print(a)
##################################################################################################################################

##################################################################################################################################
#Find the Runner-Up Score!
if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())

    a = set([a for a in arr])

    print(sorted(a,reverse=True)[1])
##################################################################################################################################

##################################################################################################################################
#Nested Lists
if __name__ == '__main__':
    a = []

    for _ in range(int(input())):
        name = input()
        score = float(input())
        
        a.append([name, score])



    second_higher_score = sorted(set([score for name, score in a]))[1]
    score_name = sorted([name for name, score in a if score == second_higher_score])
    print('\n'.join(score_name))
##################################################################################################################################

##################################################################################################################################
#Lists
if __name__ == '__main__':
    N = int(input())
    b = []

    for i in range(N):
        l = input().split()
        cmd = l[0]
        value = l[1:]

        if cmd != 'print':
            cmd += '('+','.join(value)+')'
            eval('b.'+cmd)        
        else:
            print(b)
##################################################################################################################################

##################################################################################################################################
#Tuples
if __name__ == '__main__':
    n = int(input())
    integer_list = map(int, input().split())

    print(hash(tuple(list(integer_list))))
##################################################################################################################################

##################################################################################################################################
#sWAP cASE
def swap_case(s):
    return s.swapcase()
##################################################################################################################################

##################################################################################################################################
#String Split and Join
def split_and_join(line):
    return '-'.join(line.split())
##################################################################################################################################

##################################################################################################################################
#What's Your Name?
def print_full_name(a, b):
    print("Hello {} {}! You just delved into python.".format(a, b))
##################################################################################################################################

##################################################################################################################################
#Mutations
def mutate_string(string, position, character):
    s = list(string)
    s[position] = character

    return ''.join(s)
##################################################################################################################################

##################################################################################################################################
#Find a string
def count_substring(string, sub_string):
    s   = string
    sub = sub_string
    return len([s[i:len(sub)+i] for i in range(len(s)) if s[i:len(sub)+i] == sub])
##################################################################################################################################

##################################################################################################################################
#String Validators
if __name__ == '__main__':
    s = input()
    t = list(set(s))

    print(any([t[i].isalnum() for i in range(len(t))]))
    print(any([t[i].isalpha() for i in range(len(t))]))
    print(any([t[i].isdigit() for i in range(len(t))]))
    print(any([t[i].islower() for i in range(len(t))]))
    print(any([t[i].isupper() for i in range(len(t))]))
##################################################################################################################################

##################################################################################################################################
#Text Alignment
#Replace all ______ with rjust, ljust or center. 

thickness = int(input()) #This must be an odd number
c = 'H'

#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))    

#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))    

#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))
##################################################################################################################################

##################################################################################################################################
#Text Wrap
def wrap(string, max_width):
    return textwrap.fill(string,max_width)
##################################################################################################################################

##################################################################################################################################
#Designer Door Mat
n, m = map(int,input().split())
pattern = [('.|.'*(2*i + 1)).center(m, '-') for i in range(n//2)]
print('\n'.join(pattern + ['WELCOME'.center(m, '-')] + pattern[::-1]))
##################################################################################################################################

##################################################################################################################################
#String Formatting

def print_formatted(number):
    width = len('{:b}'.format(number))
    for i in range(number):
        i += 1
        print('{:>{width}d} {:>{width}o} {:>{width}X} {:>{width}b}'.format(i,i,i,i,width=width))
##################################################################################################################################

##################################################################################################################################
#Alphabet Rangoli
import string

alpha = string.ascii_lowercase

def print_rangoli(size):
    n = size
    L = []

    for i in range(n):
        s = "-".join(alpha[i:n])
        L.append((s[::-1]+s[1:]).center(4*n-3, "-"))

    print('\n'.join(L[:0:-1]+L))
##################################################################################################################################

##################################################################################################################################
#Capitalize
def solve(s):
    a = s.split(' ')
    b = [a[i].capitalize() for i in range(len(a))]

    return ' '.join(b)
##################################################################################################################################

##################################################################################################################################
#itertools.product()
from itertools import product

l = input()
m = input()

a = [int(l.split()[i]) for i in range(len(l.split()))]
b = [int(m.split()[i]) for i in range(len(m.split()))]

print(*product(a,b))
##################################################################################################################################

##################################################################################################################################
#collections.Counter()
from collections import Counter

x = int(input())
s = Counter(input().split())
n = int(input())
p = [input().split() for i in range(n)]
l = 0

for i in range(n):
    if s[p[i][0]] > 0:
        l += int(p[i][1])
        s[p[i][0]] = int(s[p[i][0]]) - 1
        #print(s)

print(l)
##################################################################################################################################

##################################################################################################################################
#itertools.permutations()
from itertools import permutations

s, n = input().split()

l = sorted(list(permutations(s,int(n))))

for i in range(len(l)):
    print(''.join(l[i]))
##################################################################################################################################

##################################################################################################################################
#Polar Coordinates
import cmath

print(*cmath.polar(complex(input())), sep='\n')
    print(''.join(l[i]))
##################################################################################################################################

##################################################################################################################################
#Introduction to Sets
def average(array):
    return sum(set(array))/len(set(array))
##################################################################################################################################

##################################################################################################################################
#DefaultDict Tutorial
from collections import defaultdict

n, m = map(int,input().split())
a = [input() for i in range(n)]
b = [input() for i in range(m)]
d = defaultdict(list)


for i in range(len(a)):
    d[a[i]].append(i+1)

for i in range(len(b)):
    print(*d[b[i]] or [-1])
##################################################################################################################################

##################################################################################################################################
#Calendar Module
import calendar

MM, DD, YYYY = map(int,input().split())

print(calendar.day_name[calendar.weekday(YYYY, MM, DD)].upper())
##################################################################################################################################

##################################################################################################################################
#Exceptions
n = int(input())

for i in range(n):
    try:
        a, b = map(str,input().split())
        print(int(a)//int(b))
    except ZeroDivisionError as e:
        print('Error Code:',e)
    except ValueError as e:
        print('Error Code:',e)
##################################################################################################################################

##################################################################################################################################
#Collections.namedtuple()
from collections import namedtuple
n, Student = int(input()), namedtuple('Student', input())
print(sum([int(Student(*input().split()).MARKS) for _ in range(n)])/n)
##################################################################################################################################

##################################################################################################################################
#Collections.OrderedDict()
from collections import OrderedDict, Counter

n = int(input())
o = OrderedDict()
a = [input().split() for _ in range(n)]
item = [' '.join(a[_][:-1]) for _ in range(n)]
qty = Counter()

for _ in range(n):
    qty[item[_]] += 1

for _ in range(n):
    o[item[_]] = int(a[_][-1]) * qty[item[_]]
    #print(item[_], int(a[_][-1]), qty[item[_]],int(a[_][-1]) * qty[item[_]])
##################################################################################################################################

##################################################################################################################################
#Symmetric Difference
n1, m1, n2, m2  = int(input()), set(list(map(int,input().split()))), int(input()), set(list(map(int,input().split())))

result = sorted(m1.symmetric_difference(m2))

for _ in range(len(result)):
    print(result[_])
##################################################################################################################################

##################################################################################################################################
#itertools.combinations()
from itertools import combinations

s, n  = input().split()

for i in range(1, int(n)+1):
    for j in combinations(sorted(s), i):
        print(''.join(j))
##################################################################################################################################

##################################################################################################################################
#Incorrect Regex
import re

n = int(input())

for i in range(n):
    try:
        re.compile(input())
        print(True)
    except re.error:
        print(False)
##################################################################################################################################

##################################################################################################################################
#Set .add()
n = int(input())
s = set()

for i in range(n):
    s.add(input())

print(len(s))
##################################################################################################################################

##################################################################################################################################
#itertools.combinations_with_replacement()
from itertools import combinations_with_replacement

s, n = input().split()

for j in combinations_with_replacement(sorted(s),int(n)):
    print(''.join(j))
##################################################################################################################################

##################################################################################################################################
#Set .discard(), .remove() & .pop()
n = int(input())
s = set(map(int, input().split()))
N = int(input())

for i in range(N):
    eval('s.{0}({1})'.format(*input().split()+['']))

print(sum(s))
##################################################################################################################################

##################################################################################################################################
#Collections.deque()
from collections import deque

n = int(input())
d = deque()
l = [input().split()+[''] for _ in range(n)]

for i in range(n):
    eval('d.{0}({1})'.format(*l[i]))

print(*d)
##################################################################################################################################

##################################################################################################################################
#Set .union() Operation
n1, m1 = int(input()), set(map(int,input().split()))
n2, m2 = int(input()), set(map(int,input().split()))

print(len(m1.union(m2)))
##################################################################################################################################

##################################################################################################################################
#Set .intersection() Operation
n1, m1 = int(input()), set(map(int,input().split()))
n2, m2 = int(input()), set(map(int,input().split()))

print(len(m1.intersection(m2)))
##################################################################################################################################

##################################################################################################################################
#Mod Divmod
a, b = int(input()), int(input())

print(a//b)
print(a%b)
print(divmod(a,b))
##################################################################################################################################

##################################################################################################################################
#Power - Mod Power
a, b, m = int(input()), int(input()), int(input())

print(pow(a,b))
print(pow(a,b,m))
##################################################################################################################################

##################################################################################################################################
#Set .difference() Operation
n1, m1 = int(input()), set(map(int,input().split()))
n2, m2 = int(input()), set(map(int,input().split()))

print(len(m1.difference(m2)))
##################################################################################################################################

##################################################################################################################################
#Integers Come In All Sizes
a, b, c, d = int(input()), int(input()), int(input()), int(input())

print(a**b+c**d)
##################################################################################################################################

##################################################################################################################################
#Set .symmetric_difference() Operation
n1, m1 = int(input()), set(map(int,input().split()))
n2, m2 = int(input()), set(map(int,input().split()))

print(len(set(m1.symmetric_difference(m2))))
##################################################################################################################################

##################################################################################################################################
#Set Mutations
n, m, o = int(input()), set(map(int,input().split())), int(input())

for i in range(o):
    eval('m.{0}({1})'.format(input().split()[0],list(map(int,input().split()))))

print(sum(m))
##################################################################################################################################

##################################################################################################################################
#The Captain's Room
from collections import Counter

n, m = int(input()), input().split()
c = Counter()

for _ in range(len(m)):
    c[m[_]] += 1

for keys, values in c.items():
    if values == 1:
        print(keys)
##################################################################################################################################

##################################################################################################################################
#Check Subset
T = int(input())

for i in range(T):
    A1 = list(map(int,input().split()))
    A2 = set(map(int,input().split()))
    A3 = list(map(int,input().split())),
    A4 = set(map(int,input().split()))

    print(A2.issubset(A4))
##################################################################################################################################

##################################################################################################################################
#Check Strict Superset
A, n, l = set(map(int,input().split())), int(input()), []

for i in range(n):
    l.append(A.issuperset(set(map(int, input().split()))))

print(all(l))
##################################################################################################################################

##################################################################################################################################
#Class 2 - Find the Torsional Angle

class Points(object):
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def __sub__(self, no):
        return Points(self.x - no.x, self.y - no.y, self.z - no.z)

    def dot(self, no):
        return self.x * no.x + self.y * no.y + self.z * no.z

    def cross(self, no):
        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)
        
    def absolute(self):
        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)
##################################################################################################################################

##################################################################################################################################
#Zipped!

n, x = map(int,input().split())
scores = list(zip(*[list(map(float,input().split())) for i in range(x)]))

for i in range(n):
    print(sum(scores[i])/len(scores[i]))
##################################################################################################################################

##################################################################################################################################
#Input()

x, k = map(int,input().split())
p = input()

print(eval(p) == k)
##################################################################################################################################

##################################################################################################################################
#Python Evaluation

eval(input())
##################################################################################################################################

##################################################################################################################################
#Any or All

n, m = int(input()), list(map(int,input().split()))
print(all([m[i] >= 0 for i in range(n)]) and any(str(m[i]) == str(m[i])[::-1] for i in range(n)))
##################################################################################################################################

##################################################################################################################################
#Detect Floating Point Number

import re

n = int(input())
m = [input() for i in range(n)]
regex = '^[-+]?[0-9]*\.[0-9]+$'

for _ in range(n):
    if re.search(regex, m[_]):
        print(True)
    else:
        print(False)
##################################################################################################################################
